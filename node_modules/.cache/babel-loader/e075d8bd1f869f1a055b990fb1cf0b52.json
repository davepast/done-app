{"ast":null,"code":"var _jsxFileName = \"/Users/dave/Documents/Programming/React/done_app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { DayPicker, NavBar, NoteView } from './components';\nimport { formatDay } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  // Challenge 1: Import and render NoteView and NavBar\n  // Challenge 2: Comment out NoteView and import and render DayPicker\n  // Challenge 3: Lift state up from DayPicker here and pass it to DayPicker and NoteView\n  // Challenge 4: Use API from `store.ts` to store the notes\n  // Class name tips:\n  // - app__navbar\n  // - app__content\n  const [selectedDay, selectDay] = React.useState(null);\n  const title = React.useMemo(() => {\n    return selectedDay !== null ? formatDay(selectedDay) : 'Done App';\n  }, [selectedDay]);\n  const handleBack = React.useCallback(() => {\n    selectDay(null);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      className: \"app__navbar\",\n      title: title,\n      canGoBack: selectedDay !== null,\n      onBack: () => {\n        selectDay(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), !selectedDay && /*#__PURE__*/_jsxDEV(DayPicker, {\n      onSelectDay: selectDay,\n      className: \"app__content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), selectedDay && /*#__PURE__*/_jsxDEV(NoteView, {\n      className: \"app__content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"PWzCrEsu+8R0Xx0YQ4CiiRWyFtA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dave/Documents/Programming/React/done_app/src/App.tsx"],"names":["React","DayPicker","NavBar","NoteView","formatDay","App","selectedDay","selectDay","useState","title","useMemo","handleBack","useCallback"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,cAA5C;AACA,SAASC,SAAT,QAA0B,SAA1B;;AAEA,OAAO,SAASC,GAAT,GAAe;AAAA;;AAEpB;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,QAAM,CAACC,WAAD,EAAcC,SAAd,IAA2BP,KAAK,CAACQ,QAAN,CAA4B,IAA5B,CAAjC;AAEA,QAAMC,KAAK,GAAGT,KAAK,CAACU,OAAN,CAAc,MAAM;AAAC,WAAOJ,WAAW,KAAK,IAAhB,GAAuBF,SAAS,CAACE,WAAD,CAAhC,GAAgD,UAAvD;AAAkE,GAAvF,EAAyF,CAACA,WAAD,CAAzF,CAAd;AACA,QAAMK,UAAU,GAAGX,KAAK,CAACY,WAAN,CAAkB,MAAM;AACzCL,IAAAA,SAAS,CAAC,IAAD,CAAT;AAAgB,GADC,CAAnB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,KAAK,EAAEE,KAFT;AAGE,MAAA,SAAS,EAAEH,WAAW,KAAK,IAH7B;AAIE,MAAA,MAAM,EAAE,MAAM;AACZC,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AANH;AAAA;AAAA;AAAA;AAAA,YADF,EAUG,CAACD,WAAD,iBACC,QAAC,SAAD;AACA,MAAA,WAAW,EAAEC,SADb;AAEA,MAAA,SAAS,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,YAXJ,EAiBGD,WAAW,iBAAI,QAAC,QAAD;AAAU,MAAA,SAAS,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,YAjBlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAxCeD,G;;KAAAA,G;AA0ChB,eAAeA,GAAf","sourcesContent":["import React from 'react'\n\nimport './App.css'\nimport { DayPicker, NavBar, NoteView } from './components'\nimport { formatDay } from './utils'\n\nexport function App() {\n\n  // Challenge 1: Import and render NoteView and NavBar\n  // Challenge 2: Comment out NoteView and import and render DayPicker\n  // Challenge 3: Lift state up from DayPicker here and pass it to DayPicker and NoteView\n  // Challenge 4: Use API from `store.ts` to store the notes\n\n  // Class name tips:\n  // - app__navbar\n  // - app__content\n\n  const [selectedDay, selectDay] = React.useState<Date | null>(null)\n\n  const title = React.useMemo(() => {return selectedDay !== null ? formatDay(selectedDay) : 'Done App'}, [selectedDay])\n  const handleBack = React.useCallback(() => { \n    selectDay(null)}\n    )\n\n  return (\n    <div className=\"app\">\n      <NavBar \n        className='app__navbar'\n        title={title}\n        canGoBack={selectedDay !== null}\n        onBack={() => {\n          selectDay(null)\n        }}\n        />\n\n      {!selectedDay && (\n        <DayPicker \n        onSelectDay={selectDay}\n        className='app__content'\n      />\n      )}\n\n      {selectedDay && <NoteView className='app__content' /> }\n    \n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}