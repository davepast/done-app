{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nconst NOTES_PER_DAY_KEY = '@done-app/notes-per-day';\n\nfunction load() {\n  try {\n    var _localStorage$getItem;\n\n    return JSON.parse((_localStorage$getItem = localStorage.getItem(NOTES_PER_DAY_KEY)) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '{}');\n  } catch (err) {\n    console.error(err);\n    return {};\n  }\n}\n\nfunction store(state) {\n  localStorage.setItem(NOTES_PER_DAY_KEY, JSON.stringify(state));\n}\n\nexport function useStoreProvider() {\n  _s();\n\n  const [notesPerDay, setNotesPerDay] = useState(load());\n  useEffect(() => {\n    store(notesPerDay);\n  }, [notesPerDay]);\n  const hasNote = useCallback(day => {\n    var _note$length;\n\n    const note = notesPerDay[day.getTime()];\n    return ((_note$length = note === null || note === void 0 ? void 0 : note.length) !== null && _note$length !== void 0 ? _note$length : 0) > 0;\n  }, [notesPerDay]);\n  const saveNote = useCallback((note, day) => {\n    setNotesPerDay(notesPerDay => {\n      return { ...notesPerDay,\n        [day.getTime()]: note\n      };\n    });\n  }, []);\n  const getNote = useCallback(day => {\n    var _notesPerDay$day$getT;\n\n    return (_notesPerDay$day$getT = notesPerDay[day.getTime()]) !== null && _notesPerDay$day$getT !== void 0 ? _notesPerDay$day$getT : null;\n  }, [notesPerDay]);\n  return useMemo(() => ({\n    hasNote,\n    saveNote,\n    getNote\n  }), [hasNote, saveNote, getNote]);\n}\n\n_s(useStoreProvider, \"aGrChajz6vT6g10iHRFt5djmoHA=\");","map":{"version":3,"sources":["/Users/dave/Documents/Programming/React/done_app/src/Store.ts"],"names":["useCallback","useEffect","useMemo","useState","NOTES_PER_DAY_KEY","load","JSON","parse","localStorage","getItem","err","console","error","store","state","setItem","stringify","useStoreProvider","notesPerDay","setNotesPerDay","hasNote","day","note","getTime","length","saveNote","getNote"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AASA,MAAMC,iBAAiB,GAAG,yBAA1B;;AAEA,SAASC,IAAT,GAAgB;AACd,MAAI;AAAA;;AACF,WAAOC,IAAI,CAACC,KAAL,0BAAWC,YAAY,CAACC,OAAb,CAAqBL,iBAArB,CAAX,yEAAsD,IAAtD,CAAP;AACD,GAFD,CAEE,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,WAAO,EAAP;AACD;AACF;;AAED,SAASG,KAAT,CAAeC,KAAf,EAAmC;AACjCN,EAAAA,YAAY,CAACO,OAAb,CAAqBX,iBAArB,EAAwCE,IAAI,CAACU,SAAL,CAAeF,KAAf,CAAxC;AACD;;AAED,OAAO,SAASG,gBAAT,GAAmC;AAAA;;AACxC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAcE,IAAI,EAAlB,CAA9C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,KAAK,CAACK,WAAD,CAAL;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,QAAME,OAAO,GAAGpB,WAAW,CAAEqB,GAAD,IAAwB;AAAA;;AAClD,UAAMC,IAAI,GAAGJ,WAAW,CAACG,GAAG,CAACE,OAAJ,EAAD,CAAxB;AACA,WAAO,iBAACD,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEE,MAAP,uDAAiB,CAAjB,IAAsB,CAA7B;AACD,GAH0B,EAGxB,CAACN,WAAD,CAHwB,CAA3B;AAKA,QAAMO,QAAQ,GAAGzB,WAAW,CAAC,CAACsB,IAAD,EAAeD,GAAf,KAA6B;AACxDF,IAAAA,cAAc,CAAED,WAAD,IAAiB;AAC9B,aAAO,EACL,GAAGA,WADE;AAEL,SAACG,GAAG,CAACE,OAAJ,EAAD,GAAiBD;AAFZ,OAAP;AAID,KALa,CAAd;AAMD,GAP2B,EAOzB,EAPyB,CAA5B;AASA,QAAMI,OAAO,GAAG1B,WAAW,CAAEqB,GAAD,IAA8B;AAAA;;AACxD,oCAAOH,WAAW,CAACG,GAAG,CAACE,OAAJ,EAAD,CAAlB,yEAAqC,IAArC;AACD,GAF0B,EAExB,CAACL,WAAD,CAFwB,CAA3B;AAIA,SAAOhB,OAAO,CAAC,OAAO;AACpBkB,IAAAA,OADoB;AAEpBK,IAAAA,QAFoB;AAGpBC,IAAAA;AAHoB,GAAP,CAAD,EAIV,CAACN,OAAD,EAAUK,QAAV,EAAoBC,OAApB,CAJU,CAAd;AAKD;;GA9BeT,gB","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\"\n\nexport interface Store {\n  hasNote(day: Date): boolean\n  saveNote(note: string, day: Date): void\n  getNote(day: Date): string | null\n}\n\ntype NotesPerDay = { [dayTimestamp: number]: string }\nconst NOTES_PER_DAY_KEY = '@done-app/notes-per-day'\n\nfunction load() {\n  try {\n    return JSON.parse(localStorage.getItem(NOTES_PER_DAY_KEY) ?? '{}')\n  } catch (err) {\n    console.error(err)\n    return {}\n  }\n}\n\nfunction store(state: NotesPerDay) {\n  localStorage.setItem(NOTES_PER_DAY_KEY, JSON.stringify(state))\n}\n\nexport function useStoreProvider(): Store {\n  const [notesPerDay, setNotesPerDay] = useState<NotesPerDay>(load())\n  \n  useEffect(() => {\n    store(notesPerDay)\n  }, [notesPerDay])\n\n  const hasNote = useCallback((day: Date): boolean => {\n    const note = notesPerDay[day.getTime()]\n    return (note?.length ?? 0) > 0\n  }, [notesPerDay])\n\n  const saveNote = useCallback((note: string, day: Date) => {\n    setNotesPerDay((notesPerDay) => {\n      return {\n        ...notesPerDay,\n        [day.getTime()]: note\n      }\n    })\n  }, [])\n\n  const getNote = useCallback((day: Date): string | null => {\n    return notesPerDay[day.getTime()] ?? null\n  }, [notesPerDay])\n\n  return useMemo(() => ({\n    hasNote,\n    saveNote,\n    getNote\n  }), [hasNote, saveNote, getNote])\n}"]},"metadata":{},"sourceType":"module"}